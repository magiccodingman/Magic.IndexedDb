using E2eTestWebApp.TestPages;
using System.Text.Json;

namespace E2eTest;

[TestClass]
public class OpenTest : TestBase<OpenTestPage>
{
    private class DatabaseInfo()
    {
        public string? Name { get; set; }
        public int Version { get; set; }
    }

    [TestMethod]
    public async Task DirectOpenTest()
    {
        await using var p = await this.NewPageAsync();

        _ = await p.Page.EvaluateAsync("indexedDB.deleteDatabase('OpenTest.DirectOpen')");
        var databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        Assert.IsFalse(databases!.Any(x => x.Name == "OpenTest.DirectOpen"));

        var result = await this.RunTestPageMethodAsync<string>(p => p.DirectOpen);
        Assert.AreEqual("OK", result);

        databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 10:
        // https://dexie.org/docs/Dexie/Dexie.version()
        // https://github.com/dexie/Dexie.js/issues/59
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.DirectOpen" && x.Version == 10));
    }

    [TestMethod]
    public async Task RegisteredOpenTest1()
    {
        await using var p = await this.NewPageAsync();

        _ = await p.Page.EvaluateAsync("indexedDB.deleteDatabase('OpenTest.RegisteredOpen1')");
        var databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        Assert.IsFalse(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen1"));

        var result = await this.RunTestPageMethodAsync<string>(p => p.RegisteredOpen1);
        Assert.AreEqual("OK", result);

        databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 20:
        // https://dexie.org/docs/Dexie/Dexie.version()
        // https://github.com/dexie/Dexie.js/issues/59
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen1" && x.Version == 20));
    }

    [TestMethod]
    public async Task RegisteredOpenTest2()
    {
        await using var p = await this.NewPageAsync();

        _ = await p.Page.EvaluateAsync("indexedDB.deleteDatabase('OpenTest.RegisteredOpen2')");
        var databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        Assert.IsFalse(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen2"));

        var result = await this.RunTestPageMethodAsync<string>(p => p.RegisteredOpen2);
        Assert.AreEqual("OK", result);

        databases = await p.Page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 30:
        // https://dexie.org/docs/Dexie/Dexie.version()
        // https://github.com/dexie/Dexie.js/issues/59
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen2" && x.Version == 30));
    }
}
