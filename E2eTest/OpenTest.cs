using E2eTest.Entities;
using E2eTest.Extensions;
using E2eTestWebApp.TestPages;

namespace E2eTest;

[TestClass]
public class OpenTest : TestBase<OpenTestPage>
{
    [TestMethod]
    public async Task DirectOpenTest()
    {
        var page = await this.NewPageAsync();
        await page.DeleteDatabaseAsync("OpenTest.DirectOpen");

        var result = await this.RunTestPageMethodAsync(p => p.DirectOpen);
        Assert.AreEqual("OK", result);

        var databases = await page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 10:
        // https://dexie.org/docs/Dexie/Dexie.version()
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.DirectOpen" && x.Version == 10));
    }

    [TestMethod]
    public async Task RegisteredOpenTest1()
    {
        var page = await this.NewPageAsync();
        await page.DeleteDatabaseAsync("OpenTest.RegisteredOpen1");

        var result = await this.RunTestPageMethodAsync(p => p.RegisteredOpen1);
        Assert.AreEqual("OK", result);

        var databases = await page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 20:
        // https://dexie.org/docs/Dexie/Dexie.version()
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen1" && x.Version == 20));
    }

    [TestMethod]
    public async Task RegisteredOpenTest2()
    {
        var page = await this.NewPageAsync();
        await page.DeleteDatabaseAsync("OpenTest.RegisteredOpen2");

        var result = await this.RunTestPageMethodAsync(p => p.RegisteredOpen2);
        Assert.AreEqual("OK", result);

        var databases = await page.EvaluateAsync<DatabaseInfo[]>("indexedDB.databases()");
        // The actual version will be 30:
        // https://dexie.org/docs/Dexie/Dexie.version()
        Assert.IsTrue(databases!.Any(x => x.Name == "OpenTest.RegisteredOpen2" && x.Version == 30));
    }

    [TestMethod]
    public async Task GetTest()
    {
        var page = await this.NewPageAsync();
        await page.DeleteDatabaseAsync("OpenTest.Get");

        var result = await this.RunTestPageMethodAsync(p => p.Get);
        Assert.AreEqual("OpenTest.Get", result);
    }

    [TestMethod]
    public async Task StoreSchemaTest()
    {
        var page = await this.NewPageAsync();
        await page.GotoAsync("/");

        await page.DeleteDatabaseAsync("OpenTest.StoreSchema");

        var result = await this.RunTestPageMethodAsync(p => p.StoreSchema);
        Assert.AreEqual("OK", result);

        var storeSchema = await page.EvaluateAsync<string>("storeSchema('OpenTest.StoreSchema')");
        Assert.That.AreJsonEqual("""
            {
                "S1": {
                    "autoIncrement": true, "keyPath": ["P11"],
                    "indexes": {
                        "I11": {"keyPath": ["I11"],"multiEntry": false,"unique": false},
                        "I12": {"keyPath": ["I12"],"multiEntry": false,"unique": false},
                        "U11": {"keyPath": ["U11"],"multiEntry": false,"unique": true},
                        "U12": {"keyPath": ["U12"],"multiEntry": false,"unique": true}
                    }
                },
                "S2": {
                    "autoIncrement": false, "keyPath": ["P21"],
                    "indexes": {
                        "U21": {"keyPath": ["U21"],"multiEntry": false,"unique": true}
                    }
                }
            }
            """, storeSchema);
    }
}
