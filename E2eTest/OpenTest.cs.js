window.storeSchema = (database) =>
{
    return new Promise((resolve, reject) =>
    {
        const request = window.indexedDB.open(database);
        request.onsuccess = () =>
        {
            const asArray = (value) =>
            {
                if (value === null || value === undefined)
                    return [];
                else if (Array.isArray(value))
                    return value;
                return [value];
            };

            const db = request.result;
            const result = {};
            const transaction = db.transaction(db.objectStoreNames);
            for (const storeName of db.objectStoreNames)
            {
                const store = transaction.objectStore(storeName);

                const indexes = {};
                for (const indexName of store.indexNames)
                {
                    const index = store.index(indexName)
                    indexes[index.name] = {
                        keyPath: asArray(index.keyPath),
                        multiEntry: index.multiEntry,
                        unique: index.unique
                    }
                }

                result[store.name] = {
                    autoIncrement: store.autoIncrement,
                    keyPath: asArray(store.keyPath),
                    indexes: indexes
                };
            }
            resolve(JSON.stringify(result));
        };
        request.onerror = () => reject("Failed to open database.");
        request.onblocked = () => reject("Failed to open database.");
    })
};