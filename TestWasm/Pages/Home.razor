@page "/"
@using Magic.IndexedDb
@using TestWasm.Models
@using TestWasm.Repository
@using System.Linq;
@using TestBase.Helpers
@using TestBase.Models
@using TestWasm.Share
@using Person = TestWasm.Models.Person

@inject IMagicIndexedDb _MagicDb

@{
    string storageQuotaText;
    string storageUsageText;
    if (storageQuota >= 1024)
    {
        storageQuota = storageQuota / 1024.0;
        // Round the value to two decimal places
        storageQuota = Math.Round(storageQuota, 2);
        // Display the value in GB
        storageQuotaText = $"{storageQuota} GB";
    }
    else
    {
        // Display the value in MB
        storageQuotaText = $"{Math.Round(storageQuota, 2)} MB";
    }

    if (storageUsage >= 1024)
    {
        storageUsage = storageUsage / 1024.0;
        // Round the value to two decimal places
        storageUsage = Math.Round(storageUsage, 2);
        // Display the value in GB
        storageUsageText = $"{storageUsage} GB";
    }
    else
    {
        // Display the value in MB
        storageUsageText = $"{Math.Round(storageUsage, 2)} MB";
    }

    // Display the storage size on the front-end
    <p>Storage Used: @storageUsageText</p>
    <p>Storage Quota: @storageQuotaText</p>

}

<PageTitle>Example</PageTitle>

<h3>Unit Tests</h3>

@if (allPeople != null && allPeople.Any() && personQuery != null)
{

    <MudExpansionPanels MultiExpansion="true">
        <PanelCustomTests allPeople="@allPeople" personQuery="@personQuery" />
        <PanelUnitTests InMemoryList="@allPeople" MagicQuery="@personQuery" BluePrint="@(new QueryTestBlueprint<Person>
                    {
                        WherePredicates = [p => (
    // Group 1: TestInt matches
    (p.TestInt == 9 || p.TestInt == 3 || p.TestInt == 7)

    &&

    // Group 2: Specific names or age range
    (
        (p.Name == "Luna" || p.Name == "Jerry" || p.Name == "Jamie")
        || (p._Age >= 35 && p._Age <= 40)
        || (p.Name == "Zane" && p._Age > 45)
    )

    &&

    // Group 3: Age-based logic only
    (
        p._Age < 30 || p._Age > 50 || p._Age == 35
    )
    )],
                        OrderBys = [x => x.TestInt],
                        OrderByDescendings = [x => x.TestInt],
                        TakeValues = [2],
                        TakeLastValues = [1],
                        SkipValues = [2],
IndexOrderingProperties = new List<Func<Person, object>> {
                                        x => x.TestInt,
                                        x => x.Name
                            }
                    })"></PanelUnitTests>


        <PanelUnitTests InMemoryList="@allPeople" MagicQuery="@personQuery" BluePrint="@(new QueryTestBlueprint<Person>
                    {
                        WherePredicates = [x => x.TestInt > 2],
                        OrderBys = [x => x._Age],
                        OrderByDescendings = [x => x._Age],
                        TakeValues = [2],
                        TakeLastValues = [1],
                        SkipValues = [1],
                            IndexOrderingProperties = new List<Func<Person, object>> {
                                        x => x.TestInt
                            }
                    })"></PanelUnitTests>


        <PanelUnitTests OverrideMaxRepeats="2" InMemoryList="@allPeople" MagicQuery="@personQuery" BluePrint="@(new QueryTestBlueprint<Person>
                    {
                        WherePredicates = [x => x._Age < 30 || x._Age == 35 ],
                        OrderBys = [x => x._Age],
                        OrderByDescendings = [x => x._Age],
                        TakeValues = [2],
                        TakeLastValues = [1],
                        SkipValues = [1],
                    })"></PanelUnitTests>
    </MudExpansionPanels>

}






<br />
<br />

<h3>People In IndexedDb!</h3>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Age</th>
            <th>Not Mapped</th>
            <th>Access</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Person person in allPeople.OrderBy(x => x.Name))
        {
            <tr>
                <td>@person._Id</td>
                <td>@person.Name</td>
                <td>@person._Age</td>
                <td>
                    <div style="max-width: 400px; overflow-x: auto;">
                        @person.DoNotMapTest
                    </div>
                </td>

                <td>@person.Access</td>
            </tr>
        }
    </tbody>
</table>

<br />
<br />
<h3>Complex query capabilities!</h3>
<pre>
    <code>
        <span style="color: #2A56C6;">await</span> manager.<span style="color: #2A56C6;">Where</span><span style="color: #A31515;">&lt;Person&gt;</span>(x =&gt; x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"c"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>)
        <span style="color: #2A56C6;">||</span> x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"l"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>)
        <span style="color: #2A56C6;">||</span> x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"j"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>) <span style="color: #2A56C6;">&amp;&amp;</span> x._Age <span style="color: #2A56C6;">&gt;</span> <span style="color: #2A56C6;">35</span>
        ).<span style="color: #2A56C6;">OrderBy</span>(x =&gt; x._Id).<span style="color: #2A56C6;">Skip</span>(<span style="color: #2A56C6;">1</span>).<span style="color: #2A56C6;">ToListAsync</span>();
    </code>
</pre>

@code {
    public List<(string, TestResponse, string)> TestResults = new();

    private static readonly Random _random = new Random();

    public static int GetRandomYear()
    {
        return _random.Next(1980, 2024); // Upper bound is exclusive
    }

    public static DateTime GetDateWithSameMonthDay(int year)
    {
        DateTime today = DateTime.Today;
        return new DateTime(year, today.Month, today.Day);
    }

    private void RunTest<T>(string testName,
        IEnumerable<T> indexDbResults, IEnumerable<T> correctResults) where T : class
    {
        // Remove any nulls from both collections
        indexDbResults = indexDbResults.Where(x => x != null);
        correctResults = correctResults.Where(x => x != null);

        var result = TestValidator.ValidateLists(correctResults, indexDbResults);

        string countResults = $"Results: {indexDbResults.Count()}";
        if (result.Success == false)
        {
            countResults = $"IndexDB Results: {indexDbResults.Count()} / Correct Results: {correctResults.Count()}";
        }
        TestResults.Add((testName, result, countResults));
        StateHasChanged();
    }

    private List<Person> allPeople { get; set; } = new List<Person>();
    private List<Person> allPeopleCorrect { get; set; } = new List<Person>();
    private IEnumerable<Person> WhereExample { get; set; } = Enumerable.Empty<Person>();
    private double storageQuota { get; set; }
    private double storageUsage { get; set; }
    private IMagicQuery<Person>? personQuery { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var db = await _MagicDb.Database(IndexDbContext.Client);
                await db.DeleteAsync();
                // Targets the default database automatically if called without any parameters.
                personQuery = await _MagicDb.Query<Person>();
                await personQuery.ClearTable();

                // Choose an assigned database to Person with strictly typed enforced connected Db's.
                IMagicQuery<Person> employeeDbQuery = await _MagicDb.Query<Person>(x => x.Databases.Client);

                // Not implemented yet
                // // // Highly not suggested, but you're allowed to target databases not assigned to the Person table
                // IMagicQuery<Person> animalDbQuery = await _MagicDb.Query<Person>(IndexDbContext.Animal);

                // // // DO NOT DO THIS! I only am allowing this for maximum flexibility but this is very dangerous.
                // IMagicQuery<Person> unassignedDbQuery = await _MagicDb.QueryOverride<Person>("DbName", "SchemaName");




                Person[] persons = new Person[] {
                        new Person { Name = "Zack", DateOfBirth = null, TestInt = 9, _Age = 45, GUIY = Guid.NewGuid(), DoNotMapTest = "I buried treasure behind my house", Access=Person.Permissions.CanRead},
                        new Person { Name = "Luna", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "Jerry is my husband and I had an affair with Bob.", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite},
                        new Person { Name = "Jerry", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "My wife is amazing", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite|Person.Permissions.CanCreate},
                        new Person { Name = "Jamie", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "My wife is amazing", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite|Person.Permissions.CanCreate},
                        new Person { Name = "James", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "My wife is amazing", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite|Person.Permissions.CanCreate},
                        new Person { Name = "Jack", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "My wife is amazing", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite|Person.Permissions.CanCreate},
                        new Person { Name = "Jon", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 37, GUIY = Guid.NewGuid(), DoNotMapTest = "I black mail Luna for money because I know her secret", Access = Person.Permissions.CanRead},
                        new Person { Name = "Jack", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 37, GUIY = Guid.NewGuid(), DoNotMapTest = "I have a drug problem", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite},
                        new Person { Name = "Cathy", TestInt = 9, DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 22, GUIY = Guid.NewGuid(), DoNotMapTest = "I got away with reading Bobs diary.", Access = Person.Permissions.CanRead | Person.Permissions.CanWrite},
                        new Person { Name = "Bob", TestInt = 3 , DateOfBirth = GetDateWithSameMonthDay(GetRandomYear()), _Age = 69, GUIY = Guid.NewGuid(), DoNotMapTest = "I caught Cathy reading my diary, but I'm too shy to confront her.", Access = Person.Permissions.CanRead },
                        new Person { Name = "Alex", TestInt = 3 , DateOfBirth = null, _Age = 80, GUIY = Guid.NewGuid(), DoNotMapTest = "I'm naked! But nobody can know!" },
                        new Person { Name = "Zapoo", DateOfBirth = null, TestInt = 9, _Age = 45, GUIY = Guid.NewGuid(), DoNotMapTest = "I buried treasure behind my house", Access=Person.Permissions.CanRead},

                        new Person { Name = "Sarah", TestInt = -1, _Age = 30, GUIY = Guid.NewGuid(), DoNotMapTest = "I hate my job", Access=Person.Permissions.CanRead},
        new Person { Name = "Michael", TestInt = 15, _Age = 50, GUIY = Guid.NewGuid(), DoNotMapTest = "I'm hiding a big secret", Access=Person.Permissions.CanRead | Person.Permissions.CanWrite},
        new Person { Name = "Tommy", TestInt = 7, _Age = 12, GUIY = Guid.NewGuid(), DoNotMapTest = "I am just a kid" },
        new Person { Name = "Grace", TestInt = 3, _Age = 90, GUIY = Guid.NewGuid(), DoNotMapTest = "I have seen the world" },
        new Person { Name = "Xylophone", TestInt = 9, _Age = 27, GUIY = Guid.NewGuid(), DoNotMapTest = "I have the weirdest name" },
        new Person { Name = "Yasmine", TestInt = 9, _Age = 40, GUIY = Guid.NewGuid(), DoNotMapTest = null },
            // Additional test case persons to stress-test LINQ validation
    new Person { Name = "Alicia", TestInt = 42, _Age = 16, GUIY = Guid.NewGuid(), DoNotMapTest = "I just got my driver's license" },
    new Person { Name = "Ben", TestInt = 0, _Age = 25, GUIY = Guid.NewGuid(), DoNotMapTest = "I have no TestInt value" },
    new Person { Name = "Clara", TestInt = 100, _Age = 65, GUIY = Guid.NewGuid(), DoNotMapTest = "I retired last week", Access = Person.Permissions.CanRead | Person.Permissions.CanWrite },
    new Person { Name = "Danny", TestInt = 9, _Age = 40, GUIY = Guid.NewGuid(), DoNotMapTest = null }, // Null handling
    new Person { Name = "Elliot", TestInt = -20, _Age = 55, GUIY = Guid.NewGuid(), DoNotMapTest = "My test int is negative" },
    new Person { Name = "Fiona", TestInt = 11, _Age = 33, GUIY = Guid.NewGuid(), DoNotMapTest = "I like puzzles" },
    new Person { Name = "George", TestInt = 8, _Age = 72, GUIY = Guid.NewGuid(), DoNotMapTest = "I fought in a war", Access = Person.Permissions.CanRead | Person.Permissions.CanWrite | Person.Permissions.CanCreate },
    new Person { Name = "Henry", TestInt = 99, _Age = 29, GUIY = Guid.NewGuid(), DoNotMapTest = "I almost made it to 100 TestInt" },
    new Person { Name = "Isla", TestInt = 2, _Age = 18, GUIY = Guid.NewGuid(), DoNotMapTest = "I just turned into an adult" },
    new Person { Name = "Jackie", TestInt = 75, _Age = 60, GUIY = Guid.NewGuid(), DoNotMapTest = "I love cooking" },
    new Person { Name = "Kevin", TestInt = 5, _Age = 48, GUIY = Guid.NewGuid(), DoNotMapTest = "I own a small business" },
    new Person { Name = "Liam", TestInt = 9, _Age = 55, GUIY = Guid.NewGuid(), DoNotMapTest = "I just became a grandfather" },
    new Person { Name = "Mona", TestInt = 88, _Age = 35, GUIY = Guid.NewGuid(), DoNotMapTest = "I am a detective", Access = Person.Permissions.CanRead | Person.Permissions.CanWrite },
    new Person { Name = "Nathan", TestInt = 7, _Age = 27, GUIY = Guid.NewGuid(), DoNotMapTest = "I play guitar" },
    new Person { Name = "Olivia", TestInt = 13, _Age = 45, GUIY = Guid.NewGuid(), DoNotMapTest = "I run marathons" },
    new Person { Name = "Patrick", TestInt = 3, _Age = 52, GUIY = Guid.NewGuid(), DoNotMapTest = "I work in IT" },
    new Person { Name = "Quinn", TestInt = 22, _Age = 42, GUIY = Guid.NewGuid(), DoNotMapTest = "I design board games" },
    new Person { Name = "Rachel", TestInt = 77, _Age = 36, GUIY = Guid.NewGuid(), DoNotMapTest = "I am a pilot" },
    new Person { Name = "Steve", TestInt = 9, _Age = 38, GUIY = Guid.NewGuid(), DoNotMapTest = "I am an engineer" },
    new Person { Name = "Tina", TestInt = 3, _Age = 68, GUIY = Guid.NewGuid(), DoNotMapTest = "I just got my pension" },
    new Person { Name = "Uma", TestInt = 14, _Age = 39, GUIY = Guid.NewGuid(), DoNotMapTest = "I teach yoga" },
    new Person { Name = "Victor", TestInt = 6, _Age = 31, GUIY = Guid.NewGuid(), DoNotMapTest = "I am an artist" },
    new Person { Name = "Wendy", TestInt = 50, _Age = 50, GUIY = Guid.NewGuid(), DoNotMapTest = "My age matches my test int" },
    new Person { Name = "Xander", TestInt = 19, _Age = 21, GUIY = Guid.NewGuid(), DoNotMapTest = "I am a college student" },
    new Person { Name = "Yara", TestInt = 90, _Age = 32, GUIY = Guid.NewGuid(), DoNotMapTest = "I work in finance" },
    new Person { Name = "Zane", TestInt = 101, _Age = 47, DateOfBirth = new DateTime(2020, 2, 10), GUIY = Guid.NewGuid(), DoNotMapTest = "I love motorcycles" },

     };

                var guiys = new HashSet<Guid>();
                var count = 0;
                foreach (var p in persons)
                {
                    count += 1;
                    p._Id = count;
                    p.TestIntStable = count;
                    p.TestIntStable2 = 10;
                    if (p.GUIY == Guid.Empty)
                        p.GUIY = Guid.NewGuid();

                    if (!guiys.Add(p.GUIY))
                    {
                        Console.WriteLine($"Duplicate GUID found! {p.Name} - {p.GUIY}");
                    }
                }

                //var storageInfo = await _MagicDb.GetStorageEstimateAsync();
                //storageQuota = storageInfo.QuotaInMegabytes;
                //storageUsage = storageInfo.UsageInMegabytes;




                // WhereExample = await (manager.Where<Person>(x => x.Name.StartsWith("c", StringComparison.OrdinalIgnoreCase)
                // || x.Name.StartsWith("l", StringComparison.OrdinalIgnoreCase)
                // || x.Name.StartsWith("j", StringComparison.OrdinalIgnoreCase) && x._Age > 35
                // || x.Name.Contains("bo", StringComparison.OrdinalIgnoreCase)
                // ).OrderBy(x => x._Id).Skip(1).AsAsyncEnumerable()).ToListAsync();

                //IMagicQuery<Person> personQuery = manager.Query<Person>();

                //await personQuery.AddRangeAsync(persons);
                foreach (var p in persons.OrderBy(x => x._Id))
                {
                    await personQuery.AddAsync(p);
                }


                allPeople = await personQuery.ToListAsync();

                StateHasChanged();

                @* //await manager.ClearTableAsync<Person>();
                var db = await _MagicDb.Database(IndexDbContext.Client);
                //await db.DeleteAsync();
                await db.CloseAsync();
                bool doesExist = await db.DoesExistAsync();
                bool isOpen = await db.IsOpenAsync();
                await db.OpenAsync();
                bool isOpenNow = await db.IsOpenAsync(); *@

                var d = new DateTime();
                var asdf = d.DayOfWeek;
                var asdf2 = d.DayOfYear;


                // I know the validation of "allPeople" targets differently but I know this is the right result.
                // This is a weird .NET memory grab weirdess.



                // var blueprint = new QueryTestBlueprint<Person>
                //     {
                //         WherePredicates = [x => x.TestInt == 9],
                //         OrderBys = [x => x._Age],
                //         OrderByDescendings = [x => x._Age],
                //         TakeValues = [2],
                //         TakeLastValues = [1],
                //         SkipValues = [1],
                //     };

                // var tests = MagicQueryPathWalker.GenerateAllPaths(personQuery, allPeople, blueprint);

                // foreach (var test in tests)
                // {
                //     try
                //     {
                //         var executedTestDb = await test.ExecuteDb();
                //         var mem = test.ExecuteInMemory();
                //         RunTest(test.Name, executedTestDb, mem);
                //     }
                //     catch (Exception ex)
                //     {
                //         //RunTest(test.Name, [], [], $"Exception: {ex.Message}");
                //     }
                // }


                // RunTest("Test Test",
                // await personQuery.Cursor(x => x.TestInt == 9).OrderBy(x => x._Age).Skip(1).ToListAsync(),
                // allPeople.Where(x => x.TestInt == 9).OrderBy(x => x._Age).ThenBy(x => x._Id).Skip(1));

                // var asdfdffddf = await personQuery.Cursor(x => x.TestInt == 9).OrderBy(x => x._Age).Skip(1).ToListAsync();
                // RunTest("Test Test",
                // await personQuery.Cursor(x => x.TestInt == 9).OrderBy(x => x._Age).Skip(1).ToListAsync(),
                // allPeople.Where(x => x.TestInt == 9).OrderBy(x => x._Age).ThenBy(x => x._Id).Skip(1));

                var result1 = await personQuery.Take(2).ToListAsync();
             

                var result2 = allPeople.OrderBy(x => x._Id).Take(2).ToList();




                // ends with not yet supported
                // // 🔀 Complex AND/OR Mix (Nested Multiple Layers)
                // RunTest("Deeply Nested AND within OR",
                //     await personQuery.Where(x => (x._Age > 30 && (x.TestInt == 9 || x.Name.StartsWith("J"))) || (x.TestInt == 3 && x.Name.EndsWith("b", StringComparison.OrdinalIgnoreCase)))
                //                      .ToListAsync(),
                //     allPeople.Where(x => (x._Age > 30 && (x.TestInt == 9 || x.Name.StartsWith("J"))) || (x.TestInt == 3 && x.Name.EndsWith("b", StringComparison.OrdinalIgnoreCase))));


                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}